package com.github.view;

import com.github.dao.DirectoryRepository;
import com.github.model.Directory;
import com.github.threads.FileParser;
import com.github.threads.FileWalker;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.concurrent.CopyOnWriteArrayList;

@Service
@Scope("prototype")
public class MainForm extends JFrame {
    public JFileChooser fileChooser;
    private JTextField tfCatalog;
    private JButton btnParse;
    private JProgressBar progressBar1;
    private JLabel labCatalog;
    private JPanel panel1;

    @Autowired
    private DirectoryRepository directoryRepository;

    @Autowired
    private ApplicationContext context;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MainForm() {
        add(panel1);

        fileChooser.setVisible(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);

        btnParse.addActionListener(e -> {
            fileChooser.setVisible(true);
            repaint();

            if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File[] files = fileChooser.getSelectedFile().listFiles();

                if (files != null) {
                    CopyOnWriteArrayList<File> fileList = new CopyOnWriteArrayList<>(files);

                    for (File file : files) {
                        if (file.isDirectory())
                            FileWalker.getFiles(file, fileList);
                        else
                            fileList.add(file);
                    }

                    if (!CollectionUtils.isEmpty(fileList)) {
                        for (File file : fileList) {
                            Directory directory = directoryRepository.getDirectoryByPath(file.getParentFile().getAbsolutePath());

                            if (directory == null) {
                                directory = new Directory();

                                directory.setName(file.getParentFile().getName());
                                directory.setPath(file.getParentFile().getAbsolutePath());

                                directoryRepository.save(directory);
                                directoryRepository.flush();
                            }
                        }

                        FileParser fileParser = context.getBean(FileParser.class);
                        fileParser.setFiles(fileList);
                        fileParser.start();
                    }
                }
            } else {
                System.out.println("No Selection");
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setVisible(true);
        tfCatalog = new JTextField();
        panel1.add(tfCatalog, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btnParse = new JButton();
        btnParse.setText("Parsuj");
        btnParse.setMnemonic('P');
        btnParse.setDisplayedMnemonicIndex(0);
        btnParse.setVisible(true);
        panel1.add(btnParse, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar1 = new JProgressBar();
        progressBar1.setIndeterminate(true);
        panel1.add(progressBar1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labCatalog = new JLabel();
        labCatalog.setText("Katalog");
        panel1.add(labCatalog, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        fileChooser = new JFileChooser();
        panel1.add(fileChooser, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
